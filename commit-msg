#!/usr/bin/env node

/**
 * Git hook to log commit messages to be later used for standup updates
 */

const exec = require('child_process').exec;
const fs = require('fs');
const path = require('path');

const STATUS_UPDATE_DIR = path.join(
  require('os').homedir(),
  '.statusupdate',
);
// opens .git/COMMIT_EDITMSG
const commitMessage = fs.readFileSync(process.argv[2]).toString().replace(/\n/g, '');

(async function() {
  try {
    const branchName = await getCurrentBranchName();
    const repositoryName = await getRepositoryName();
    logStatusUpdate({ repositoryName, commitMessage, branchName });
  } catch (e) {
    console.log('failed to log status update');
    process.exit(0);
  }
})();

function getCurrentBranchName() {
  return new Promise((res, rej) => {
    const command = 'git rev-parse --abbrev-ref HEAD';
    exec(command, (err, stdout) => err ? rej(err) : res(stdout));
  });
}

function getRepositoryName() {
  return new Promise((res, rej) => {
    const command = 'basename -s .git `git config --get remote.origin.url`';
    exec(command, (err, stdout) => err ? rej(err) : res(stdout));
  });
}

function logStatusUpdate(update) {
  if (!fs.existsSync(STATUS_UPDATE_DIR)){
    fs.mkdirSync(STATUS_UPDATE_DIR);
  }

  const padStart = (num) => num < 10 ? `0${num}` : num;
  const now = new Date();
  const [dd, mm, yyyy] = [
    now.getDate(),
    now.getMonth(),
    now.getFullYear(),
  ].map(padStart);
  const filename = `${dd}${mm}${yyyy}`;
  const filepath = path.join(STATUS_UPDATE_DIR, filename);

  const updates = fs.existsSync(filepath)
      ? JSON.parse(fs.readFileSync(filepath).toString())
      : [];
  updates.push(update)

  fs.writeFileSync(filepath, JSON.stringify(updates));
}
